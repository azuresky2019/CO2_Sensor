=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "AD1"       (component AD1)
   - AD1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - AD1_GetMeasuredValues -This method copies results of the last measurement to the user supplied buffer. Data size depends 
                on the size of measured sample group (see <SelectSampleGroup()> or <CreateSampleGroup()> method). Data 
                representation is defined by the <Result type> property. Typically this method is called from 
                <OnMeasurementComplete> event to get results of the last measurement. This method is not available if DMA is 
                enabled.
   - AD1_CreateSampleGroup -This method prepares HW for next measurement according to array of samples defined during run-time. 
                The array of samples should be prepared prior to calling this method. Pointer to the array is passed into this 
                method in parameter SampleGroupPtr. The number of samples is defined by parameter SampleCount. Once any group 
                is prepared, the measurement can be started multiple times. Note: This method works only with the sample groups 
                defined during run-time. For design-time defined groups use <SelectSampleGroup()> method.

Module "AS1"       (component AS1)
   - AS1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - AS1_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.

Module "AS2"       (component AS2)
   - AS2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - AS2_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission.
   - AS2_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception.

Module "GPIO1"     (component GPIO1)
   - GPIO1_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - GPIO1_SetFieldValue -This method sets the output data value of the specified bit field.
   - GPIO1_GetFieldValue -This method returns the current input data of the specified field.
   - GPIO1_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - GPIO1_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - GPIO1_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "TI1"       (component TI1)

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "Cpu"       (component MKL15Z128LK4)

===================================================================================
