<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UVBuild\TEST01.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UVBuild\TEST01.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sun May 17 12:07:44 2015
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; task_manage &rArr; run_routine &rArr; HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">AS1_Interrupt</a> from as1.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[d]">AS2_Interrupt</a> from as2.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[a]">Cpu_INT_NMIInterrupt</a> from cpu.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[b]">Cpu_Interrupt</a> from cpu.o(.text) referenced 42 times from vectors.o(.vectortable)
 <LI><a href="#[e]">TU1_Interrupt</a> from tu1.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[5]">__init_hardware</a> from cpu.o(.text) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[f]">__main</a> from __main.o(!!!main) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[9]">__thumb_startup</a> from startup_arm_cc.o(.emb_text) referenced from vectors.o(.vectortable)
 <LI><a href="#[8]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ab]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[14]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[15]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[17]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[19]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[11]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[df]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[18]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; task_manage &rArr; run_routine &rArr; HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[bb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[22]"></a>Cpu_EnterCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_ReceiveBlock
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_SendBlock
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_ReceiveBlock
</UL>

<P><STRONG><a name="[23]"></a>Cpu_ExitCritical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_ReceiveBlock
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_SendBlock
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_ReceiveBlock
</UL>

<P><STRONG><a name="[9]"></a>__thumb_startup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arm_cc.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[ac]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>AD1_Init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, ad1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[54]"></a>AD1_StartSingleMeasurement</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ad1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[53]"></a>AD1_CreateSampleGroup</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ad1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD1_CreateSampleGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[56]"></a>AD1_GetMeasuredValues</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ad1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD1_GetMeasuredValues
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[55]"></a>AD1_GetMeasurementCompleteStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ad1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[e5]"></a>AD1_StartCalibration</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ad1.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>AD1_GetCalibrationResultStatus</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ad1.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>AS1_Init</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, as1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AS1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[21]"></a>AS1_ReceiveBlock</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, as1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_ExitCritical
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_EnterCritical
</UL>

<P><STRONG><a name="[24]"></a>AS1_SendBlock</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, as1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AS1_SendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_ExitCritical
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urat_printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
</UL>

<P><STRONG><a name="[c]"></a>AS1_Interrupt</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, as1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AS1_Interrupt &rArr; InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptTx
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[35]"></a>AS2_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, as2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AS2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[2a]"></a>AS2_ReceiveBlock</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, as2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_ExitCritical
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_EnterCritical
</UL>

<P><STRONG><a name="[2b]"></a>AS2_SendBlock</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, as2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AS2_SendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_ExitCritical
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[d]"></a>AS2_Interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, as2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AS2_Interrupt &rArr; InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptTx
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[a]"></a>Cpu_INT_NMIInterrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cpu_INT_NMIInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_OnNMIINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[b]"></a>Cpu_Interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[5]"></a>__init_hardware</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_cc.o(.emb_text)
</UL>
<P><STRONG><a name="[31]"></a>PE_low_level_init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PE_low_level_init &rArr; FLASH1_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntLdd1_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>Cpu_OnNMIINT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_INT_NMIInterrupt
</UL>

<P><STRONG><a name="[84]"></a>FLASH1_OnOperationComplete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
</UL>

<P><STRONG><a name="[42]"></a>TI1_OnInterrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntLdd1_OnInterrupt
</UL>

<P><STRONG><a name="[2d]"></a>AS2_OnBlockReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptRx
</UL>

<P><STRONG><a name="[2f]"></a>AS2_OnBlockSent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptTx
</UL>

<P><STRONG><a name="[26]"></a>AS1_OnBlockReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptRx
</UL>

<P><STRONG><a name="[28]"></a>AS1_OnBlockSent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptTx
</UL>

<P><STRONG><a name="[36]"></a>GPIO1_Init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, gpio1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[39]"></a>GPIO1_SetFieldValue</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, gpio1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO1_SetFieldValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aq_Init
</UL>

<P><STRONG><a name="[3b]"></a>GPIO1_GetFieldValue</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, gpio1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[3c]"></a>GPIO1_ClearFieldBits</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gpio1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_ClearFieldBits &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>GPIO1_SetFieldBits</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gpio1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[3e]"></a>GPIO1_ToggleFieldBits</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gpio1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[3f]"></a>GPIO1_SetFieldInputDirection</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, gpio1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[40]"></a>GPIO1_SetFieldOutputDirection</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, gpio1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO1_SetFieldOutputDirection &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[41]"></a>TimerIntLdd1_OnInterrupt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ti1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerIntLdd1_OnInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_OnInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TU1_OnCounterRestart
</UL>

<P><STRONG><a name="[44]"></a>TU1_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, tu1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TU1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntLdd1_Init
</UL>

<P><STRONG><a name="[e]"></a>TU1_Interrupt</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tu1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TU1_Interrupt &rArr; TU1_OnCounterRestart &rArr; TimerIntLdd1_OnInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TU1_OnCounterRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[38]"></a>TimerIntLdd1_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timerintldd1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerIntLdd1_Init &rArr; TU1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TU1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[43]"></a>TU1_OnCounterRestart</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timerintldd1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TU1_OnCounterRestart &rArr; TimerIntLdd1_OnInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntLdd1_OnInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TU1_Interrupt
</UL>

<P><STRONG><a name="[46]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_Init
</UL>

<P><STRONG><a name="[45]"></a>Ram_Init</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ram_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = main &rArr; task_manage &rArr; run_routine &rArr; HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manage
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_flash
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opa_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aq_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ram_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_ClearFieldBits
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[49]"></a>task_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>task_manage</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = task_manage &rArr; run_routine &rArr; HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>flash_write</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_write &rArr; FLASH1_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_GetOperationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[61]"></a>flash_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_read &rArr; FLASH1_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_GetOperationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_flash
</UL>

<P><STRONG><a name="[63]"></a>flash_erase</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_erase &rArr; FLASH1_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_GetOperationStatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
</UL>

<P><STRONG><a name="[48]"></a>read_from_flash</STRONG> (Thumb, 1358 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_from_flash &rArr; flash_read &rArr; FLASH1_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>write_to_flash</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = write_to_flash &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[29]"></a>serial_restart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_Interrupt
</UL>

<P><STRONG><a name="[67]"></a>USART_SendDataString</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_SendDataString &rArr; AS1_SendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseData
</UL>

<P><STRONG><a name="[47]"></a>modbus_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>checkData</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = checkData &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[6c]"></a>urat_printf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = urat_printf &rArr; AS1_SendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
</UL>

<P><STRONG><a name="[6d]"></a>Response_Request</STRONG> (Thumb, 1416 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Response_Request &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urat_printf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_SendBlock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[4d]"></a>dealwithData</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dealwithData &rArr; Response_Request &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSend_COM
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>iic_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldBits
</UL>

<P><STRONG><a name="[73]"></a>iic_readbyte</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iic_readbyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldOutputDirection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldInputDirection
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldBits
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_GetFieldValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_ClearFieldBits
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_read_measurement_no_hold_master
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_write_user_register
</UL>

<P><STRONG><a name="[78]"></a>iic_writebyte</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldOutputDirection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldInputDirection
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_GetFieldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_trigger_measurement_no_hold_master
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_soft_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_write_user_register
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
</UL>

<P><STRONG><a name="[79]"></a>iic_start</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldOutputDirection
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_read_measurement_no_hold_master
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_trigger_measurement_no_hold_master
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_soft_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_write_user_register
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_restart
</UL>

<P><STRONG><a name="[7a]"></a>iic_restart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_write_user_register
</UL>

<P><STRONG><a name="[7b]"></a>iic_stop</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iic_stop &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_SetFieldOutputDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_read_measurement_no_hold_master
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_trigger_measurement_no_hold_master
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_soft_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_write_user_register
</UL>

<P><STRONG><a name="[7c]"></a>htu21d_write_user_register</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, htu21.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_restart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[7d]"></a>htu21d_soft_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, htu21.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
</UL>

<P><STRONG><a name="[7e]"></a>htu21d_trigger_measurement_no_hold_master</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, htu21.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = htu21d_trigger_measurement_no_hold_master &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
</UL>

<P><STRONG><a name="[7f]"></a>htu21d_read_measurement_no_hold_master</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, htu21.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = htu21d_read_measurement_no_hold_master &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
</UL>

<P><STRONG><a name="[80]"></a>htu21d_calculation</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, htu21.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = htu21d_calculation &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
</UL>

<P><STRONG><a name="[52]"></a>HTU21_TASK</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, htu21.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_calculation
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_read_measurement_no_hold_master
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_trigger_measurement_no_hold_master
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[33]"></a>FLASH1_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH1_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[5e]"></a>FLASH1_Write</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, flash1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[62]"></a>FLASH1_Read</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, flash1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH1_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[64]"></a>FLASH1_Erase</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, flash1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH1_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RangeCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[5f]"></a>FLASH1_Main</STRONG> (Thumb, 606 bytes, Stack size 64 bytes, flash1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLASH1_Main
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_OnOperationComplete
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_ExitCritical
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[60]"></a>FLASH1_GetOperationStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[6f]"></a>init_crc16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[69]"></a>crc16_byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseData
</UL>

<P><STRONG><a name="[6b]"></a>crc16</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
</UL>

<P><STRONG><a name="[37]"></a>GPIO2_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gpio2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[e7]"></a>GPIO2_SetFieldValue</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, gpio2.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>GPIO2_GetFieldValue</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gpio2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[74]"></a>GPIO2_ClearFieldBits</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_ClearFieldBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[72]"></a>GPIO2_SetFieldBits</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO2_SetFieldBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_init
</UL>

<P><STRONG><a name="[e8]"></a>GPIO2_ToggleFieldBits</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio2.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>GPIO2_SetFieldInputDirection</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gpio2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[77]"></a>GPIO2_SetFieldOutputDirection</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, gpio2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO2_SetFieldOutputDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
</UL>

<P><STRONG><a name="[e9]"></a>GPIO2_SetOperationMode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gpio2.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>I2C_read_string</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_restart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_readbyte
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_read
</UL>

<P><STRONG><a name="[86]"></a>BMP180_I2C_bus_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BMP180_I2C_bus_read &rArr; I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_read_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_cal_param
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_init
</UL>

<P><STRONG><a name="[87]"></a>bmp180_get_cal_param</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp180_get_cal_param &rArr; BMP180_I2C_bus_read &rArr; I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_init
</UL>

<P><STRONG><a name="[4a]"></a>bmp180_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmp180_init &rArr; bmp180_get_cal_param &rArr; BMP180_I2C_bus_read &rArr; I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_cal_param
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>bmp180_get_temperature</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = bmp180_get_temperature &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Task
</UL>

<P><STRONG><a name="[8a]"></a>Shift_Right_32bit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, psensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
</UL>

<P><STRONG><a name="[89]"></a>bmp180_get_pressure</STRONG> (Thumb, 482 bytes, Stack size 80 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = bmp180_get_pressure &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shift_Right_32bit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Task
</UL>

<P><STRONG><a name="[8c]"></a>I2C_write_string</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_write_string &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_writebyte
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_write
</UL>

<P><STRONG><a name="[8d]"></a>BMP180_I2C_bus_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BMP180_I2C_bus_write &rArr; I2C_write_string &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_write_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
</UL>

<P><STRONG><a name="[8e]"></a>bmp180_get_ut</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bmp180_get_ut &rArr; BMP180_I2C_bus_read &rArr; I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Task
</UL>

<P><STRONG><a name="[8f]"></a>bmp180_get_up</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bmp180_get_up &rArr; BMP180_I2C_bus_read &rArr; I2C_read_string &rArr; iic_restart &rArr; iic_start &rArr; iic_writebyte &rArr; GPIO2_SetFieldOutputDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMP180_I2C_bus_read
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Task
</UL>

<P><STRONG><a name="[51]"></a>Press_Task</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Press_Task &rArr; bmp180_get_pressure &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_ut
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[90]"></a>spi_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmp91051.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldOutputDirection
</UL>

<P><STRONG><a name="[91]"></a>spi_write</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lmp91051.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_write &rArr; GPIO1_SetFieldOutputDirection &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldOutputDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_sdio
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_sdio
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opa_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[92]"></a>spi_read</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, lmp91051.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_GetFieldValue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldOutputDirection
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldInputDirection
</UL>

<P><STRONG><a name="[93]"></a>enable_sdio</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp91051.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[94]"></a>disable_sdio</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp91051.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[4b]"></a>opa_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmp91051.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = opa_init &rArr; spi_write &rArr; GPIO1_SetFieldOutputDirection &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>Co2_Detect</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, co2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Co2_Detect &rArr; spi_write &rArr; GPIO1_SetFieldOutputDirection &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_ClearFieldBits
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldValue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetMeasurementCompleteStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetMeasuredValues
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_CreateSampleGroup
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_StartSingleMeasurement
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Calculate</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, caculate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_SendBlock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[5a]"></a>Filter</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, caculate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[95]"></a>look_up_hummity_temp_table</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, aq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = look_up_hummity_temp_table &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[57]"></a>check_Air_Quality</STRONG> (Thumb, 1710 bytes, Stack size 72 bytes, aq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = check_Air_Quality &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_hummity_temp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[4c]"></a>Aq_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Aq_Init &rArr; GPIO1_SetFieldValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[b4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[b5]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[16]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[a9]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[66]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Response_Request
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Init
</UL>

<P><STRONG><a name="[ea]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_up
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_pressure
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Detect
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp180_get_temperature
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu21d_calculation
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_hummity_temp_table
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[ed]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[ae]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 88 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[ad]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[ee]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[ef]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f0]"></a>_dmul</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f1]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[b2]"></a>_fdiv</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[b1]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f2]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f3]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f4]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[7]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b6]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[b7]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[b8]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b9]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[20]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio1.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldOutputDirection
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldInputDirection
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_ToggleFieldBits
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldBits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_ClearFieldBits
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_GetFieldValue
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_SetFieldValue
</UL>

<P><STRONG><a name="[f7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[bc]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[bd]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[f8]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[bf]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
</UL>

<P><STRONG><a name="[c1]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25]"></a>InterruptRx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, as1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_OnBlockReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_Interrupt
</UL>

<P><STRONG><a name="[27]"></a>InterruptTx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, as1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InterruptTx
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_OnBlockSent
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS1_Interrupt
</UL>

<P><STRONG><a name="[2c]"></a>InterruptRx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, as2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InterruptRx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_OnBlockReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_Interrupt
</UL>

<P><STRONG><a name="[2e]"></a>InterruptTx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, as2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InterruptTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_OnBlockSent
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS2_Interrupt
</UL>

<P><STRONG><a name="[5b]"></a>reset_task_tick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_routine
</UL>

<P><STRONG><a name="[5c]"></a>push_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manage
</UL>

<P><STRONG><a name="[50]"></a>run_routine</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = run_routine &rArr; HTU21_TASK &rArr; Calculate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_Air_Quality
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Press_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTU21_TASK
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_task_tick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetMeasurementCompleteStatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_GetMeasuredValues
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_CreateSampleGroup
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_StartSingleMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_manage
</UL>

<P><STRONG><a name="[6e]"></a>initSend_COM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[70]"></a>internalDeal</STRONG> (Thumb, 1150 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = internalDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[68]"></a>responseData</STRONG> (Thumb, 3940 bytes, Stack size 48 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = responseData &rArr; USART_SendDataString &rArr; AS1_SendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[83]"></a>RangeCheck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH1_Erase
</UL>

<P><STRONG><a name="[c0]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[be]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ba]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a5]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a6]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
